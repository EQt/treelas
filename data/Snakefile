from os import path
import pandas as pd


if path.exists("./config.yml"):
    configfile: "./config.yml"
elif path.exists("../config.yml"):
    configfile: "../config.yml"


CMAKE_BUILD = config["cmake_dir"]
PARAMS = dict(s=range(config['num_span_trees']),
              l=config["lam"],
              i=config['num_repetitions'],
              alg=["opt", "apx"])


subworkflow dimacs:
    workdir: "dimacs10"
    configfile: "./config.yml"


rule collect_times:
    input: expand("{{name}}_{s}_lam{l}_rep{i}.tree_{alg}.times", **PARAMS)
    output: "{name}.tsv"
    run:
        from extract_times import tsv_concat

        tsv_concat(output[0], input)


rule extract_times:
    input:  "{name}_{s}_lam{l}_rep{i}.tree_{alg}"
    output: "{name}_{s}_lam{l}_rep{i}.tree_{alg}.times"
    run:
        from extract_times import extract_time_n

        time_pn, n = extract_time_n(input[0])
        df = pd.DataFrame(data=dict(
            dataset=wildcards.name.rpartition('/')[-1],
            seed=wildcards.s,
            lam=wildcards.l,
            rep=wildcards.i,
            alg=f'tree_{wildcards.alg}',
            num_nodes=n,
            time_per_node=time_pn,
        ), index=[0])
        df.to_csv(output[0], sep="\t", index=None)


rule bench_dimacs:
    input:
        dimacs(expand("belgium_{s}_lam{l}_rep{i}.tree_{alg}", **PARAMS))


rule run_treelas:
    input: "{name}.treelas"
    output: "{name}_lam{lam,[^_]+}{ignore}.tree_solve"
    shell: """
    {CMAKE_BUILD}/tree_solve -l {wildcards.lam} {input} | tee {output}
    """


rule run_treelas_no_output:
    input: "{name}.treelas"
    output: "{name}_lam{lam,[^_]+}{ignore}.tree_opt"
    shell: """
    {CMAKE_BUILD}/tree_solve -O -l {wildcards.lam} {input} | tee {output}
    """


rule run_treeapx:
    input: "{name}.treelas"
    output: "{name}_lam{lam,[^_]+}{ignore}.tree_apx"
    shell: "{CMAKE_BUILD}/tree_apx -l {wildcards.lam} {input} | tee {output}"


rule spanning_tree:
    input: "{name}.h5"
    output: "{name}_{seed,\\d+}.tree"
    shell: """
    {CMAKE_BUILD}/traverse -s {wildcards.seed} {input} {output}
    """


rule noisy_input:
    input: "{name}.tree"
    output: "{name}.treelas"
    run:
        import numpy as np
        import h5py
        from shutil import copyfile

        np.random.seed(2020)
        copyfile(input[0], output[0])
        with h5py.File(output[0], "r+") as io:
            n = len(io["parent"])
            io.create_dataset("y", data=np.random.randn(n))
            io.create_dataset("lam", data=[0.1])
