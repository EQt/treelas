from os import path

if path.exists("./config.yml"):
    configfile: "./config.yml"
elif path.exists("../config.yml"):
    configfile: "../config.yml"

CMAKE_BUILD = config["cmake_dir"]
LAMS = config["lam"]
PARAMS = dict(s=[1,2], l=LAMS, i=[1,2], alg=["opt", "apx"])


subworkflow dimacs:
    workdir: "dimacs10"
    configfile: "./config.yml"


rule collect_times:
    input: expand("{{name}}_{s}_lam{l}_rep{i}.tree_{alg}", **PARAMS)
    output: "{name}.tsv"
    run:
        from extract_times import extract_time_n

        with open(output[0]) as io:
            print("blub", file=io)
            # for fn in input:
            #     print(wildcards.lam, file=io)


rule bench_dimacs:
    input:
        dimacs(expand("belgium_{s}_lam{l}_rep{i}.tree_{alg}", **PARAMS))


rule run_treelas:
    input: "{name}.treelas"
    output: "{name}_lam{lam,[^_]+}{ignore}.tree_solve"
    shell: """
    {CMAKE_BUILD}/tree_solve -l {wildcards.lam} {input} | tee {output}
    """


rule run_treelas_no_output:
    input: "{name}.treelas"
    output: "{name}_lam{lam,[^_]+}{ignore}.tree_opt"
    shell: """
    {CMAKE_BUILD}/tree_solve -O -l {wildcards.lam} {input} | tee {output}
    """


rule run_treeapx:
    input: "{name}.treelas"
    output: "{name}_lam{lam,[^_]+}{ignore}.tree_apx"
    shell: "{CMAKE_BUILD}/tree_apx -l {wildcards.lam} {input} | tee {output}"


rule spanning_tree:
    input: "{name}.h5"
    output: "{name}_{seed,\\d+}.tree"
    shell: """
    cp {input} {output} && {CMAKE_BUILD}/traverse -s {wildcards.seed} {output}
    """


rule noisy_input:
    input: "{name}.tree"
    output: "{name}.treelas"
    run:
        import numpy as np
        import h5py
        from shutil import copyfile

        np.random.seed(2020)
        copyfile(input[0], output[0])
        with h5py.File(output[0], "r+") as io:
            n = len(io["parent"])
            io.create_dataset("y", data=np.random.randn(n))
            io.create_dataset("lam", data=[0.1])
