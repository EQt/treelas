language: cpp
git:
  submodules: false

matrix:
  include:
  # - env: CXX_COMPILER=g++-7 C_COMPILER=gcc-7
  #   os: linux
  #   addons:
  #     apt:
  #       sources:
  #       - ubuntu-toolchain-r-test
  #       packages:
  #       - g++-7
  - env: CXX_COMPILER=clang++ C_COMPILER=clang
    os: osx

cache:
  directories:
  - "$TRAVIS_BUILD_DIR/miniconda3"

before_cache:
- pip uninstall -y treelas
- rm -fr $TRAVIS_BUILD_DIR/miniconda3/envs
- rm -fr $TRAVIS_BUILD_DIR/miniconda3/lib/python*/site-packages/treelas*

branches:
  only:
  - master

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew search llvm &&
      brew install --with-clang llvm@5 &&
      export PATH=/usr/local/bin:$PATH &&
      which clang && clang --version
    fi

install:
- uname -a && echo $TRAVIS_OS_NAME && pwd
- export CC=${C_COMPILER:-cc} && echo $CC && $CC --version
- export CXX=${CXX_COMPILER:-c++} && echo $CXX && $CXX --version
- if [[ ! -d $PWD/miniconda3/bin ]]; then
    url="https://repo.continuum.io/miniconda/Miniconda3-latest";
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget $url-Linux-x86_64.sh -O miniconda.sh;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      wget $url-MacOSX-x86_64.sh -O miniconda.sh;
  fi; rm -fr miniconda3; bash miniconda.sh -b -p $PWD/miniconda3; fi
- export PATH=$PWD/miniconda3/bin:$PATH;
- which conda
- conda install -y pytest h5py numba
- which python
- pip install pybind11
- python -m pybind11 --include

script:
- mkdir -p build && cd build
- cmake .. -DCMAKE_CXX_COMPILER=$CXX -DCMAKE_C_COMPILER=$CC
- make tests && ./tests
- cd ../python && pwd
- python setup.py install
- py.test --color=yes

notifications:
  email:
    on_failure: change
    on_success: change

# before_deploy:
#   - git tag "$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)"

deploy:
  provider: releases
  file_glob: true
  skip_cleanup: true
  # file:
  #   - "${TRAVIS_BUILD_DIR}/build/tests"
  overwrite: true
  on:
    repo: EQt/treelas
  api_key:
    secure: HOBLUWsiBlKr3UpnSgsfYpLk47qvl8NBGtg+uzXU9iP0l3I3au0ZqI5NiJh2rE5ZqQJPCnDrF6XeyWISCo7YJe46M3jyqqwDuU/GWreFd0Ckd+sO8NTSGhZfCK90RY6f6kj65y/SjxzGIb4sYdj8nFSGRbrAfpEeHC1XFtW38GnLbKAW+ZtHYJSdRPBgfCGKP/rURErlTFFTSkfQGMa0MfZHMPj7DWSB2U2eQnOhqAk5zcw6vC5i54OMbpl4eoc/anVy/A6ywQDP5UWRaKzrsWS1ieEXaLKkN8SuY1tMbIg/1+BZ7BEavM7BmhGEELvIprcLo0gJgQjXyep0Y3vB/c1IPGc/5iBQeb7AGa5UHH/aafZiBAD81RU9qN2ZNKGkWmz5AlzPPBXPpiJ8RWzPbkHZL2e+ztBNQFzaJlZSiC0PuwSascQiCJhuIk0F1tQnw+DCoC8lULFaH+IDb0pmMlysiq8jYJBsD4uFlOzlBs13ZyNwZCta4Uy8u5FMiWRcVGESLCqsf5XhlFtgI5EgjZgXvrHis2H9094hSMRBAUTcWDrpD5TiAVaBpEy15P3B3eUh0LMkSDKAZAEU3NfCQhNaUxmjLZKnBmDJRd9HC6yylew6RzuidJ0wb9MwigzJRjeLSSBhn0FLFHnqBkmWAs/vXK7iYZUUD4hG8ccWp3Y=
